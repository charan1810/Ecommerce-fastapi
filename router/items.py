from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from sqlalchemy.orm import Session
from database import SessionLocal,Base,engine
from model import Users, Items  # Corrected to Items for clarity
from authorization.auth import oauth_scheme

router = APIRouter(
    tags=['Items details']
)
Base.metadata.create_all(bind=engine)
# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Request model for item details (without item_id if autogenerated)
class ItemDetailRequest(BaseModel):
    itemName: str
    itemDescription: str

# Endpoint to get all items with id and name only
@router.get("/items/itemdetails")
def get_all_items_detail(db: Session = Depends(get_db)):
    items = db.query(Items.id, Items.itemName).all()
    return items

# Endpoint to get items for a specific user by user ID
@router.get("/items/user_item")
def get_user_items(user_id: int, token: str = Depends(oauth_scheme), db: Session = Depends(get_db)):
    user_items = db.query(Items).filter(Items.user_id == user_id).all()
    if not user_items:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Items not found for this user")
    return user_items

# Endpoint to create a new item
@router.post("/items/itemscreate")
def create_an_item(item: ItemDetailRequest, token: str = Depends(oauth_scheme), db: Session = Depends(get_db)):
    # Create new item instance
    new_item = Items(
        itemName=item.itemName,
        itemDescription=item.itemDescription
    )
    db.add(new_item)
    db.commit()
    db.refresh(new_item)
    return {"Status": "Item added successfully", "Item": {"id": new_item.id, "name": new_item.itemName}}
